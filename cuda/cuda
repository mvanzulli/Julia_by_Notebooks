precompile(Tuple{Type{REPL.Terminals.TTYTerminal}, String, Base.TTY, Base.PipeEndpoint, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.get), Base.PipeEndpoint, Symbol, Bool})
precompile(Tuple{Type{NamedTuple{(:prompt_prefix, :prompt_suffix, :repl, :complete, :on_enter), T} where T<:Tuple}, Tuple{String, String, REPL.LineEditREPL, REPL.REPLCompletionProvider, typeof(REPL.return_callback)}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:prompt_prefix, :prompt_suffix, :repl, :complete, :on_enter), Tuple{String, String, REPL.LineEditREPL, REPL.REPLCompletionProvider, typeof(REPL.return_callback)}}, Symbol})
precompile(Tuple{typeof(Base.getindex), NamedTuple{(:prompt_prefix, :prompt_suffix, :repl, :complete, :on_enter), Tuple{String, String, REPL.LineEditREPL, REPL.REPLCompletionProvider, typeof(REPL.return_callback)}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:prompt_prefix, :prompt_suffix, :repl, :complete, :on_done), T} where T<:Tuple}, Tuple{String, String, REPL.LineEditREPL, REPL.REPLCompletionProvider, REPL.var"#do_respond#66"{Bool, Bool, REPL.var"#74#84"{REPL.LineEditREPL}, REPL.LineEditREPL, REPL.LineEdit.Prompt}}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:prompt_prefix, :prompt_suffix, :repl, :complete, :on_done), Tuple{String, String, REPL.LineEditREPL, REPL.REPLCompletionProvider, REPL.var"#do_respond#66"{Bool, Bool, REPL.var"#74#84"{REPL.LineEditREPL}, REPL.LineEditREPL, REPL.LineEdit.Prompt}}}, Symbol})
precompile(Tuple{typeof(Base.getindex), NamedTuple{(:prompt_prefix, :prompt_suffix, :repl, :complete, :on_done), Tuple{String, String, REPL.LineEditREPL, REPL.REPLCompletionProvider, REPL.var"#do_respond#66"{Bool, Bool, REPL.var"#74#84"{REPL.LineEditREPL}, REPL.LineEditREPL, REPL.LineEdit.Prompt}}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:prompt_prefix, :prompt_suffix, :repl, :complete, :on_done, :sticky), T} where T<:Tuple}, Tuple{String, String, REPL.LineEditREPL, REPL.ShellCompletionProvider, REPL.var"#do_respond#66"{Bool, Bool, REPL.var"#75#85"{REPL.LineEditREPL}, REPL.LineEditREPL, REPL.LineEdit.Prompt}, Bool}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:prompt_prefix, :prompt_suffix, :repl, :complete, :on_done, :sticky), Tuple{String, String, REPL.LineEditREPL, REPL.ShellCompletionProvider, REPL.var"#do_respond#66"{Bool, Bool, REPL.var"#75#85"{REPL.LineEditREPL}, REPL.LineEditREPL, REPL.LineEdit.Prompt}, Bool}}, Symbol})
precompile(Tuple{typeof(Base.getindex), NamedTuple{(:prompt_prefix, :prompt_suffix, :repl, :complete, :on_done, :sticky), Tuple{String, String, REPL.LineEditREPL, REPL.ShellCompletionProvider, REPL.var"#do_respond#66"{Bool, Bool, REPL.var"#75#85"{REPL.LineEditREPL}, REPL.LineEditREPL, REPL.LineEdit.Prompt}, Bool}}, Symbol})
precompile(Tuple{typeof(REPL.LineEdit.activate), REPL.LineEdit.TextInterface, REPL.LineEdit.MIState, REPL.Terminals.AbstractTerminal, REPL.Terminals.TextTerminal})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{typeof(Base.displaysize), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.:(!=)), UInt64, UInt64})
precompile(Tuple{typeof(JuliaInterpreter.__init__)})
precompile(Tuple{typeof(Revise.__init__)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.PkgId, Revise.PkgData}, Revise.PkgData, Base.PkgId})
precompile(Tuple{typeof(Revise.watch_package_callback), Base.PkgId})
precompile(Tuple{Revise.TaskThunk})
precompile(Tuple{typeof(Revise.watch_manifest), String})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.PipeEndpoint, Pair{Symbol, Array{Tuple{String, Int64}, 1}}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.PipeEndpoint}, Pair{Symbol, Module}})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{REPL.LineEdit.var"#25#26"{REPL.LineEdit.var"#240#248", String}, Any, Any})
precompile(Tuple{REPL.LineEdit.var"#240#248", REPL.LineEdit.MIState, REPL.LineEdit.ModeState, Any})
precompile(Tuple{typeof(Revise.revise_first), Expr})
precompile(Tuple{typeof(Base.isempty), Base.Set{Tuple{Revise.PkgData, String}}})
precompile(Tuple{typeof(Base.MainInclude.include), String})
precompile(Tuple{typeof(Revise.watch_includes), Module, String})
precompile(Tuple{typeof(Revise.watch_package), Base.PkgId})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Revise.PkgData}, Base.PkgId})
precompile(Tuple{Type{Revise.PkgData}, Base.PkgId})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}}, Pair{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.PkgId, CodeTracking.PkgFiles}, CodeTracking.PkgFiles, Base.PkgId})
precompile(Tuple{typeof(Base.Filesystem.cd), Revise.var"#40#41"{Revise.PkgData}, String})
precompile(Tuple{Type{NamedTuple{(:libc, :cxxstring_abi, :llvm_version), T} where T<:Tuple}, Tuple{String, String, String}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:libc, :cxxstring_abi, :llvm_version), Tuple{String, String, String}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:libc, :cxxstring_abi, :llvm_version), Tuple{String, String, String}}, Type{Base.BinaryPlatforms.Platform}, String, String})
precompile(Tuple{Type{NamedTuple{(:libc, :cxxstring_abi, :llvm_version, :call_abi), T} where T<:Tuple}, Tuple{String, String, String, String}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:libc, :cxxstring_abi, :llvm_version, :call_abi), Tuple{String, String, String, String}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:libc, :cxxstring_abi, :llvm_version, :call_abi), Tuple{String, String, String, String}}, Type{Base.BinaryPlatforms.Platform}, String, String})
precompile(Tuple{Type{NamedTuple{(:llvm_version,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:llvm_version,), Tuple{String}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:llvm_version,), Tuple{String}}, Type{Base.BinaryPlatforms.Platform}, String, String})
precompile(Tuple{Type{NamedTuple{(:cxxstring_abi, :llvm_version), T} where T<:Tuple}, Tuple{String, String}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:cxxstring_abi, :llvm_version), Tuple{String, String}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:cxxstring_abi, :llvm_version), Tuple{String, String}}, Type{Base.BinaryPlatforms.Platform}, String, String})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(RandomNumbers.__init__)})
precompile(Tuple{typeof(Requires.isprecompiling)})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.foreach), typeof(Base.invokelatest), Array{Function, 1}})
precompile(Tuple{RandomNumbers.var"#3#6"})
precompile(Tuple{typeof(Base.task_local_storage)})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Symbol})
precompile(Tuple{RandomNumbers.var"#4#7"})
precompile(Tuple{RandomNumbers.var"#5#8"})
precompile(Tuple{typeof(Base.convert), Type{Base.CoreLogging.LogLevel}, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Base.CoreLogging.LogLevel}})
precompile(Tuple{typeof(Base.:(>=)), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.isassigned), Base.RefValue{Symbol}})
precompile(Tuple{typeof(Base.something), String, String, Vararg{String}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Symbol}, Symbol})
precompile(Tuple{typeof(Base.iterate), Array{Base.PkgId, 1}})
precompile(Tuple{typeof(Base.root_module), Base.PkgId})
precompile(Tuple{typeof(Revise.add_require), String, Module, String, String, Expr})
precompile(Tuple{typeof(Base.iterate), Array{Base.PkgId, 1}, Int64})
precompile(Tuple{typeof(LLVM.handle_error), Base.Cstring})
precompile(Tuple{typeof(LLVM.handle_diagnostic), Ptr{LLVM.API.LLVMOpaqueDiagnosticInfo}, Ptr{Nothing}})
precompile(Tuple{typeof(LLVM.__init__)})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Revise.WatchList}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Revise.WatchList}, Revise.WatchList, String})
precompile(Tuple{typeof(GPUCompiler.__init__)})
precompile(Tuple{typeof(CUDA.__init__)})
precompile(Tuple{CUDA.var"#@atomic", LineNumberNode, Module, Any})
precompile(Tuple{typeof(Base.:(!=)), Expr, Expr})
precompile(Tuple{typeof(Base.isequal), Symbol, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{Any, 1}, Base.UnitRange{Int64}})
precompile(Tuple{CUDA.var"#@cuStaticSharedMem", LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Base.depwarn), String, Symbol})
precompile(Tuple{CUDA.var"#@cuda", LineNumberNode, Module, Vararg{Any}})
precompile(Tuple{typeof(Base.ntuple), Base.var"#61#62"{Tuple{Expr, Expr}, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{typeof(GPUCompiler.assign_args!), Expr, Array{Any, 1}})
precompile(Tuple{typeof(Base._collect), Array{Any, 1}, Base.Generator{Array{Any, 1}, GPUCompiler.var"#118#123"}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Any, 1}, Array{Bool, 1}}}, Base.var"#4#5"{GPUCompiler.var"#119#124"}}})
precompile(Tuple{Base.var"#4#5"{GPUCompiler.var"#119#124"}, Tuple{Symbol, Bool}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.Iterators.Zip{Tuple{Array{Any, 1}, Array{Bool, 1}}}, Base.var"#4#5"{GPUCompiler.var"#119#124"}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, GPUCompiler.var"#120#125", Array{Symbol, 1}})
precompile(Tuple{Type{Tuple}, Base.Generator{Array{Symbol, 1}, GPUCompiler.var"#120#125"}})
precompile(Tuple{typeof(Base.map), Function, Tuple{Symbol, Symbol, Symbol}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#4#5"{GPUCompiler.var"#121#126"{Expr}}, Base.Iterators.Zip{Tuple{Tuple{Symbol, Symbol, Symbol}, Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Tuple{Symbol, Symbol, Symbol}, Array{Symbol, 1}}}, Base.var"#4#5"{GPUCompiler.var"#121#126"{Expr}}}})
precompile(Tuple{typeof(Base.map), Function, Tuple{Symbol, Symbol, Symbol}, Array{Symbol, 1}, Array{Bool, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Base.var"#4#5"{GPUCompiler.var"#122#127"}, Base.Iterators.Zip{Tuple{Tuple{Symbol, Symbol, Symbol}, Array{Symbol, 1}, Array{Bool, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Tuple{Symbol, Symbol, Symbol}, Array{Symbol, 1}, Array{Bool, 1}}}, Base.var"#4#5"{GPUCompiler.var"#122#127"}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Tuple{Symbol, Symbol, Symbol}, Array{Symbol, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Tuple{Symbol, Symbol, Symbol}, Array{Symbol, 1}}, Int64, Int64})
precompile(Tuple{typeof(GPUCompiler.split_kwargs), Tuple{Expr}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Any, 1}, Array{Any, 1}, Array{Any, 1}, Array{Any, 1}}, Int64, Int64})
precompile(Tuple{Base.GC.var"#@preserve", LineNumberNode, Module, Vararg{Any}})
precompile(Tuple{typeof(Base.ntuple), Base.var"#61#62"{Tuple{Symbol, Symbol, Symbol, Symbol, Expr}, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{typeof(Base.ntuple), Base.var"#61#62"{Tuple{Expr, Expr, Expr}, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{typeof(GPUCompiler.split_kwargs), Tuple{Expr, Expr}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{Base.var"#@assert", LineNumberNode, Module, Any, Vararg{Any}})
precompile(Tuple{GPUArraysCore.var"#@allowscalar", LineNumberNode, Module, Any})
precompile(Tuple{Test.var"#@test", LineNumberNode, Module, Any, Vararg{Any}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Filter{Test.var"#16#21", Tuple{}}, Test.var"#15#20"}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Filter{Test.var"#18#23", Tuple{}}, Test.var"#17#22"}})
precompile(Tuple{typeof(Base.filter), Function, Tuple{}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Union{}, 1}, Symbol}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Union{}, 1}, Symbol}, Int64, Int64})
precompile(Tuple{typeof(Base.length), Array{Union{}, 1}})
precompile(Tuple{typeof(Base.:(!=)), Char, Char})
precompile(Tuple{CUDA.var"#@profile", LineNumberNode, Module, Any})
precompile(Tuple{CUDA.NVTX.var"#@range", LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Revise.revise_dir_queued), String})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.PipeEndpoint}, Pair{Symbol, Bool}, Pair{Symbol, Module}})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{Base.IOContext{Base.PipeEndpoint}}})
precompile(Tuple{Base.var"#foldl##kw", NamedTuple{(:init,), Tuple{Base.IOContext{Base.PipeEndpoint}}}, typeof(Base.foldl), Type, Base.Dict{Symbol, Any}})
precompile(Tuple{Base.var"##mapfoldl#244", Base.IOContext{Base.PipeEndpoint}, typeof(Base.mapfoldl), Function, Type, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.PipeEndpoint}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.PipeEndpoint}, Base.Multimedia.MIME{Symbol("text/plain")}, Base.Docs.Binding})
precompile(Tuple{typeof(Base.show), IO, Base.Docs.Binding})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.PipeEndpoint}, Symbol})
precompile(Tuple{typeof(Base.println), Base.IOContext{Base.PipeEndpoint}})
precompile(Tuple{typeof(CUDA.synchronize_cuda_tasks), Expr})
precompile(Tuple{Base.Cartesian.var"#@ncall", LineNumberNode, Module, Int64, Any, Vararg{Any}})
precompile(Tuple{GPUCompiler.var"##s591#115", Any, Any, Any, Any})
precompile(Tuple{typeof(Base.indexed_iterate), Core.MethodMatch, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Core.MethodMatch, Int64, Int64})
precompile(Tuple{typeof(Base.resize!), Array{Any, 1}, Int64})
precompile(Tuple{typeof(Core.Compiler.append!), Array{Any, 1}, Array{Core.MethodInstance, 1}})
precompile(Tuple{typeof(Core.Compiler.diff_names), Tuple{Vararg{Symbol}}, Tuple{Vararg{Symbol}}})
precompile(Tuple{CUDA.var"##s2339#208", Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CUDA.var"#209#215", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, CUDA.var"#209#215"}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, CUDA.var"#209#215"}, Int64})
precompile(Tuple{typeof(Base.map), Base.var"#84#85"{CUDA.var"#210#216"}, Core.SimpleVector})
precompile(Tuple{Base.var"#84#85"{CUDA.var"#210#216"}, Type})
precompile(Tuple{Type{LLVM.VoidType}, Ptr{LLVM.API.LLVMOpaqueType}})
precompile(Tuple{typeof(LLVM.Interop.isghosttype), LLVM.LLVMType})
precompile(Tuple{Type{LLVM.StructType}, Ptr{LLVM.API.LLVMOpaqueType}})
precompile(Tuple{Type{LLVM.GlobalVariable}, LLVM.Module, LLVM.StructType, String})
precompile(Tuple{Type{LLVM.PointerType}, Ptr{LLVM.API.LLVMOpaqueType}})
precompile(Tuple{typeof(Base.eltype), LLVM.PointerType})
precompile(Tuple{typeof(Base.all), Function, LLVM.StructTypeElementSet})
precompile(Tuple{typeof(Base._all), typeof(Base.isempty), LLVM.StructTypeElementSet, Base.Colon})
precompile(Tuple{Type{LLVM.LLVMDouble}, Ptr{LLVM.API.LLVMOpaqueType}})
precompile(Tuple{Type{LLVM.GlobalVariable}, LLVM.Module, LLVM.LLVMDouble, String})
precompile(Tuple{typeof(Base.Iterators.zip), Core.SimpleVector, Vararg{Any}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Core.SimpleVector, Array{Any, 1}}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, CUDA.var"#212#218", Base.Iterators.Zip{Tuple{Core.SimpleVector, Array{Any, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CUDA.var"#211#217", Base.Iterators.Filter{CUDA.var"#212#218", Base.Iterators.Zip{Tuple{Core.SimpleVector, Array{Any, 1}}}}})
precompile(Tuple{typeof(Base.collect), Type{Type}, Base.Generator{Base.Iterators.Filter{CUDA.var"#212#218", Base.Iterators.Zip{Tuple{Core.SimpleVector, Array{Any, 1}}}}, CUDA.var"#211#217"}})
precompile(Tuple{typeof(Base.Iterators.zip), Tuple{Expr, Expr, Expr, Expr}, Vararg{Any}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Tuple{Expr, Expr, Expr, Expr}, Array{Any, 1}}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, CUDA.var"#214#220", Base.Iterators.Zip{Tuple{Tuple{Expr, Expr, Expr, Expr}, Array{Any, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CUDA.var"#213#219", Base.Iterators.Filter{CUDA.var"#214#220", Base.Iterators.Zip{Tuple{Tuple{Expr, Expr, Expr, Expr}, Array{Any, 1}}}}})
precompile(Tuple{typeof(Base.collect), Type{Union{Expr, Symbol}}, Base.Generator{Base.Iterators.Filter{CUDA.var"#214#220", Base.Iterators.Zip{Tuple{Tuple{Expr, Expr, Expr, Expr}, Array{Any, 1}}}}, CUDA.var"#213#219"}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Type, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Type, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Type, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.pushfirst!), Array{Type, 1}, Type})
precompile(Tuple{typeof(Base.pushfirst!), Array{Union{Expr, Symbol}, 1}, Expr})
precompile(Tuple{CUDA.var"##s2340#41", Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.setindex!), Array{Symbol, 1}, Symbol, Int64})
precompile(Tuple{CUDA.var"##s2340#35", Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CUDA.var"#36#37"{Array{Symbol, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, CUDA.var"#36#37"{Array{Symbol, 1}}}})
precompile(Tuple{CUDA.var"#36#37"{Array{Symbol, 1}}, Int64})
precompile(Tuple{Type{LLVM.ArrayType}, Ptr{LLVM.API.LLVMOpaqueType}})
precompile(Tuple{Type{LLVM.IntegerType}, Ptr{LLVM.API.LLVMOpaqueType}})
precompile(Tuple{Type{LLVM.GlobalVariable}, LLVM.Module, LLVM.IntegerType, String})
precompile(Tuple{typeof(Base.Iterators.zip), Tuple{Expr, Expr, Expr, Expr, Expr}, Vararg{Any}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Tuple{Expr, Expr, Expr, Expr, Expr}, Array{Any, 1}}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, CUDA.var"#214#220", Base.Iterators.Zip{Tuple{Tuple{Expr, Expr, Expr, Expr, Expr}, Array{Any, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CUDA.var"#213#219", Base.Iterators.Filter{CUDA.var"#214#220", Base.Iterators.Zip{Tuple{Tuple{Expr, Expr, Expr, Expr, Expr}, Array{Any, 1}}}}})
precompile(Tuple{typeof(Base.collect), Type{Union{Expr, Symbol}}, Base.Generator{Base.Iterators.Filter{CUDA.var"#214#220", Base.Iterators.Zip{Tuple{Tuple{Expr, Expr, Expr, Expr, Expr}, Array{Any, 1}}}}, CUDA.var"#213#219"}})
precompile(Tuple{Type{LLVM.GlobalVariable}, LLVM.Module, LLVM.ArrayType, String})
precompile(Tuple{typeof(Base.Iterators.zip), Tuple{Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr}, Vararg{Any}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Tuple{Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr}, Array{Any, 1}}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, CUDA.var"#214#220", Base.Iterators.Zip{Tuple{Tuple{Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr}, Array{Any, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CUDA.var"#213#219", Base.Iterators.Filter{CUDA.var"#214#220", Base.Iterators.Zip{Tuple{Tuple{Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr}, Array{Any, 1}}}}})
precompile(Tuple{typeof(Base.collect), Type{Union{Expr, Symbol}}, Base.Generator{Base.Iterators.Filter{CUDA.var"#214#220", Base.Iterators.Zip{Tuple{Tuple{Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr}, Array{Any, 1}}}}, CUDA.var"#213#219"}})
precompile(Tuple{typeof(Base.ntuple), Base.var"#61#62"{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Expr}, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{Base.var"##s78#203", Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.merge_types), Tuple{Vararg{Symbol}}, Type{var"#s78"} where var"#s78"<:(NamedTuple{names, T} where T<:Tuple where names), Type{var"#s77"} where var"#s77"<:(NamedTuple{names, T} where T<:Tuple where names)})
precompile(Tuple{typeof(Base.Iterators.zip), Tuple{Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr}, Vararg{Any}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Tuple{Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr}, Array{Any, 1}}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, CUDA.var"#214#220", Base.Iterators.Zip{Tuple{Tuple{Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr}, Array{Any, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CUDA.var"#213#219", Base.Iterators.Filter{CUDA.var"#214#220", Base.Iterators.Zip{Tuple{Tuple{Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr}, Array{Any, 1}}}}})
precompile(Tuple{typeof(Base.collect), Type{Union{Expr, Symbol}}, Base.Generator{Base.Iterators.Filter{CUDA.var"#214#220", Base.Iterators.Zip{Tuple{Tuple{Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr}, Array{Any, 1}}}}, CUDA.var"#213#219"}})
precompile(Tuple{typeof(Main.main)})
precompile(Tuple{typeof(CUDA.libcuda)})
precompile(Tuple{typeof(Base.Libc.Libdl.find_library), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(LLVM.clopts), String})
precompile(Tuple{typeof(CUDA.device_contexts)})
precompile(Tuple{Type{Array{Union{Nothing, CUDA.CuContext}, 1}}, Array{Nothing, 1}})
precompile(Tuple{typeof(Base.get!), CUDA.var"#5#7"{Ptr{Nothing}}, Base.Dict{Ptr{Nothing}, CUDA.CuContext}, Ptr{Nothing}})
precompile(Tuple{Type{Array{Union{Nothing, CUDA.CuStream}, 1}}, Array{Nothing, 1}})
precompile(Tuple{typeof(Base.isassigned), Base.RefValue{Union{Nothing, String}}})
precompile(Tuple{typeof(Base.isassigned), Base.RefValue{CUDA.Deps.AbstractToolkit}})
precompile(Tuple{typeof(Base.haskey), Base.EnvDict, String})
precompile(Tuple{typeof(CUDA.release)})
precompile(Tuple{typeof(Base.filter), CUDA.Deps.var"#24#27"{Base.VersionNumber}, Array{NamedTuple{(:release, :preferred), Tuple{Base.VersionNumber, Bool}}, 1}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:release, :preferred), Tuple{Base.VersionNumber, Bool}}, Symbol})
precompile(Tuple{typeof(Base.isempty), Array{NamedTuple{(:release, :preferred), Tuple{Base.VersionNumber, Bool}}, 1}})
precompile(Tuple{Type{NamedTuple{(:rev, :by), T} where T<:Tuple}, Tuple{Bool, CUDA.Deps.var"#25#28"}})
precompile(Tuple{Base.var"#sort##kw", NamedTuple{(:rev, :by), Tuple{Bool, CUDA.Deps.var"#25#28"}}, typeof(Base.sort), Array{NamedTuple{(:release, :preferred), Tuple{Base.VersionNumber, Bool}}, 1}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Base.VersionNumber, Base.VersionNumber})
precompile(Tuple{typeof(Base.iterate), Array{NamedTuple{(:release, :preferred), Tuple{Base.VersionNumber, Bool}}, 1}})
precompile(Tuple{Type{NamedTuple{(:validate_strict, :libc, :call_abi, :libgfortran_version, :cxxstring_abi, :libstdcxx_version, :os_version), T} where T<:Tuple}, Tuple{Bool, String, Nothing, Base.VersionNumber, String, Base.VersionNumber, Nothing}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:validate_strict, :libc, :call_abi, :libgfortran_version, :cxxstring_abi, :libstdcxx_version, :os_version), Tuple{Bool, String, Nothing, Base.VersionNumber, String, Base.VersionNumber, Nothing}}, Array{Pair{Symbol, Base.SubString{String}}, 1}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:validate_strict, :libc, :call_abi, :libgfortran_version, :cxxstring_abi, :libstdcxx_version, :os_version), Tuple{Bool, String, Nothing, Base.VersionNumber, String, Base.VersionNumber, Nothing}}, NamedTuple{(:julia_version,), Tuple{Base.SubString{String}}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:validate_strict, :libc, :call_abi, :libgfortran_version, :cxxstring_abi, :libstdcxx_version, :os_version, :julia_version), Tuple{Bool, String, Nothing, Base.VersionNumber, String, Base.VersionNumber, Nothing, Base.SubString{String}}}, Type{Base.BinaryPlatforms.Platform}, String, String})
precompile(Tuple{typeof(Base.getproperty), Base.BinaryPlatforms.Platform, Symbol})
precompile(Tuple{Type{NamedTuple{(:libc, :cuda), T} where T<:Tuple}, Tuple{String, String}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:libc, :cuda), Tuple{String, String}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:libc, :cuda), Tuple{String, String}}, Type{Base.BinaryPlatforms.Platform}, String, String})
precompile(Tuple{Type{NamedTuple{(:cuda,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:cuda,), Tuple{String}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:cuda,), Tuple{String}}, Type{Base.BinaryPlatforms.Platform}, String, String})
precompile(Tuple{Type{NamedTuple{(:release, :dir), T} where T<:Tuple}, Tuple{Base.VersionNumber, String}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:release, :dir), Tuple{Base.VersionNumber, String}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{CUDA.Deps.AbstractToolkit}, CUDA.Deps.ArtifactToolkit})
precompile(Tuple{typeof(CUDA.__init_toolkit__)})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{CUDA.Deps.AbstractToolkit}})
precompile(Tuple{typeof(Base.getproperty), CUDA.Deps.ArtifactToolkit, Symbol})
precompile(Tuple{typeof(Base.:(>)), UInt32, UInt32})
precompile(Tuple{Type{NamedTuple{(:optional,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:optional,), Tuple{Bool}}, Symbol})
precompile(Tuple{typeof(Base.getindex), NamedTuple{(:optional,), Tuple{Bool}}, Symbol})
precompile(Tuple{typeof(Base.Filesystem.ispath), String})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Union{Nothing, String}}, String})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Union{Nothing, String}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, CUDA.var"#157#159"}})
precompile(Tuple{Type{Array{Union{Nothing, Tuple{CUDA.CuContext, Base.RefValue{Union{Nothing, Bool}}}}, 1}}, Array{Nothing, 1}})
precompile(Tuple{typeof(CUDA.attribute!), CUDA.CuMemoryPool, CUDA.CUmemPool_attribute_enum, UInt64})
precompile(Tuple{typeof(Main.my_reduce), Function, CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{CUDA.CuContext, Base.Dict{UInt64, Any}}, CUDA.CuContext})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{CUDA.CuContext, Base.Dict{UInt64, Any}}, Base.Dict{UInt64, Any}, CUDA.CuContext})
precompile(Tuple{typeof(LLVM.InitializeNVPTXTarget)})
precompile(Tuple{Type{Base.Set{Base.VersionNumber}}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Base.VersionNumber, CUDA.Deps.VersionRange}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Base.VersionNumber, CUDA.Deps.VersionRange}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Base.VersionNumber, CUDA.Deps.VersionRange}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), CUDA.Deps.VersionRange, Symbol})
precompile(Tuple{typeof(Base.push!), Base.Set{Base.VersionNumber}, Base.VersionNumber})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Base.VersionNumber, CUDA.Deps.VersionRange}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Set{Base.VersionNumber}})
precompile(Tuple{typeof(Base.sort), Array{Base.VersionNumber, 1}})
precompile(Tuple{Type{NamedTuple{(:cap, :ptx), T} where T<:Tuple}, Tuple{Array{Base.VersionNumber, 1}, Array{Base.VersionNumber, 1}}})
precompile(Tuple{typeof(Base.intersect), Base.Set{Base.VersionNumber}, Base.Set{Base.VersionNumber}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:cap, :ptx), Tuple{Array{Base.VersionNumber, 1}, Array{Base.VersionNumber, 1}}}, Symbol})
precompile(Tuple{typeof(Base.intersect), Array{Base.VersionNumber, 1}, Array{Base.VersionNumber, 1}})
precompile(Tuple{typeof(Base._shrink), Function, Array{Base.VersionNumber, 1}, Tuple{Array{Base.VersionNumber, 1}}})
precompile(Tuple{typeof(Base.intersect!), Base.Set{Base.VersionNumber}, Array{Base.VersionNumber, 1}})
precompile(Tuple{typeof(Base.vectorfilter), Function, Array{Base.VersionNumber, 1}})
precompile(Tuple{typeof(Base.filter), Base.var"#115#116"{typeof(Base.in), typeof(Base.pop!), Base.Set{Base.VersionNumber}}, Array{Base.VersionNumber, 1}})
precompile(Tuple{typeof(Base.collect), Array{Base.VersionNumber, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Base.VersionNumber, 1}})
precompile(Tuple{typeof(Base.filter), CUDA.var"#203#205"{CUDA.CuDevice}, Array{Base.VersionNumber, 1}})
precompile(Tuple{typeof(Base.maximum), Array{Base.VersionNumber, 1}})
precompile(Tuple{Type{NamedTuple{(:cap, :ptx, :exitable, :debuginfo, :unreachable), T} where T<:Tuple}, Tuple{Base.VersionNumber, Base.VersionNumber, Bool, Bool, Bool}})
precompile(Tuple{typeof(Base.setindex!), Array{NamedTuple{(:cap, :ptx, :exitable, :debuginfo, :unreachable), Tuple{Base.VersionNumber, Base.VersionNumber, Bool, Bool, Bool}}, 1}, NamedTuple{(:cap, :ptx, :exitable, :debuginfo, :unreachable), Tuple{Base.VersionNumber, Base.VersionNumber, Bool, Bool, Bool}}, Int64})
precompile(Tuple{typeof(GPUCompiler.cached_compilation), Base.Dict{UInt64, Any}, GPUCompiler.CompilerJob{T, P, F} where F where P where T, typeof(CUDA.cufunction_compile), typeof(CUDA.cufunction_link)})
precompile(Tuple{typeof(Base.hash), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{GPUArrays.var"#5#6", Tuple{CUDA.CuKernelContext, CUDA.CuDeviceArray{Float64, 1, 1}, Float64}}}, UInt64})
precompile(Tuple{typeof(GPUCompiler.JuliaContext), CUDA.var"#224#225"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{GPUArrays.var"#5#6", Tuple{CUDA.CuKernelContext, CUDA.CuDeviceArray{Float64, 1, 1}, Float64}}}}})
precompile(Tuple{typeof(Base.getproperty), GPUCompiler.FunctionSpec{F, TT} where TT where F, Symbol})
precompile(Tuple{Type{NamedTuple{(:world,), T} where T<:Tuple}, Tuple{UInt64}})
precompile(Tuple{GPUCompiler.var"#method_matches##kw", NamedTuple{(:world,), Tuple{UInt64}}, typeof(GPUCompiler.method_matches), Type{var"#s124"} where var"#s124"<:Tuple})
precompile(Tuple{typeof(GPUCompiler.ci_cache), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, F} where F})
precompile(Tuple{typeof(GPUCompiler.method_table), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, F} where F})
precompile(Tuple{typeof(Core.Compiler.typeinf_type), GPUCompiler.GPUInterpreter, Method, Any, Core.SimpleVector})
precompile(Tuple{typeof(Base.get!), Base.var"#190#191"{Array{Core.CodeInstance, 1}}, Base.Dict{Core.MethodInstance, Array{Core.CodeInstance, 1}}, Core.MethodInstance})
precompile(Tuple{typeof(Core.Compiler.abstract_call_known), GPUCompiler.GPUInterpreter, Any, Array{Any, 1}, Array{Any, 1}, Core.Compiler.InferenceState, Int64})
precompile(Tuple{typeof(Core.Compiler.abstract_call_gf_by_type), GPUCompiler.GPUInterpreter, Any, Array{Any, 1}, Array{Any, 1}, Any, Core.Compiler.InferenceState, Int64})
precompile(Tuple{Core.Compiler.var"#findall##kw", NamedTuple{(:limit,), Tuple{Int64}}, typeof(Core.Compiler.findall), Type, Core.Compiler.OverlayMethodTable})
precompile(Tuple{CUDA.var"##s2340#86", Any, Any, Any, Type, Any})
precompile(Tuple{Type{LLVM.CallInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Base.getproperty), Base.UnitRange{Int64}, Symbol})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:ctx,), Tuple{LLVM.Context}}, Type{LLVM.ConstantInt}, Int32})
precompile(Tuple{Type{LLVM.ConstantAsMetadata}, Ptr{LLVM.API.LLVMOpaqueMetadata}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{LLVM.API.LLVMOpaqueMetadata}}, LLVM.ConstantAsMetadata})
precompile(Tuple{typeof(LLVM.metadata), LLVM.CallInst})
precompile(Tuple{Type{LLVM.MetadataAsValue}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.API.LLVMSetMetadata), LLVM.CallInst, LLVM.MD, LLVM.MetadataAsValue})
precompile(Tuple{typeof(LLVM.ret!), LLVM.Builder, LLVM.CallInst})
precompile(Tuple{Type{LLVM.RetInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.Interop.call_function), LLVM.Function, Type, Type})
precompile(Tuple{Base.var"#@_inline_meta", LineNumberNode, Module})
precompile(Tuple{Core.Compiler.var"#255#256", Any, Any, Any})
precompile(Tuple{typeof(Core.Compiler.ssa_inlining_pass!), Core.Compiler.IRCode, Array{Core.LineInfoNode, 1}, Core.Compiler.InliningState{Core.Compiler.EdgeTracker, Core.Compiler.WorldView{GPUCompiler.CodeCache}, typeof(Core.Compiler.default_inlining_policy)}, Bool})
precompile(Tuple{typeof(Base.CoreLogging.global_logger)})
precompile(Tuple{typeof(Base.CoreLogging.min_enabled_level), Logging.ConsoleLogger})
precompile(Tuple{Type{Logging.ConsoleLogger}, Base.IOContext{Core.CoreSTDERR}, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Core.Compiler.add_call_backedges!), GPUCompiler.GPUInterpreter, Any, Array{Core.MethodInstance, 1}, Core.Compiler.MethodMatches, Any, Core.Compiler.InferenceState})
precompile(Tuple{CUDA.var"##s2340#117", Any, Any})
precompile(Tuple{CUDA.var"#@cuprintf", LineNumberNode, Module, String, Vararg{Any}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Tuple{}})
precompile(Tuple{CUDA.var"##s2340#106", Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CUDA.var"#107#108", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, CUDA.var"#107#108"}})
precompile(Tuple{Type{LLVM.ConstantExpr}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Base.vect), LLVM.ConstantExpr, Vararg{Any}})
precompile(Tuple{Type{Array{LLVM.Constant, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{LLVM.Constant, 1}, Tuple{LLVM.ConstantExpr, LLVM.PointerNull}})
precompile(Tuple{typeof(LLVM.call!), LLVM.Builder, LLVM.Function, Array{LLVM.Constant, 1}})
precompile(Tuple{typeof(Core.Compiler.statement_or_branch_cost), Any, Int64, Core.Compiler.IRCode, Array{Any, 1}, Array{Any, 1}, Bool, Core.Compiler.OptimizationParams, Nothing})
precompile(Tuple{typeof(Core.Compiler.abstract_call_gf_by_type), GPUCompiler.GPUInterpreter, Any, Nothing, Array{Any, 1}, Any, Core.Compiler.InferenceState, Int64})
precompile(Tuple{CUDA.var"##s2340#80", Any, Any, Any})
precompile(Tuple{LLVM.Interop.var"##s827#8", Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{Base.var"#convert##kw", NamedTuple{(:ctx,), Tuple{LLVM.Context}}, typeof(Base.convert), Type{LLVM.LLVMType}, Type})
precompile(Tuple{Type{LLVM.GlobalVariable}, LLVM.Module, LLVM.PointerType, String})
precompile(Tuple{Type{LLVM.PointerType}, LLVM.LLVMDouble, Int64})
precompile(Tuple{typeof(Base.vect), LLVM.PointerType, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.PointerType, LLVM.LLVMDouble, Vararg{Any}})
precompile(Tuple{Type{Array{LLVM.LLVMType, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{LLVM.LLVMType, 1}, Tuple{LLVM.PointerType, LLVM.LLVMDouble, LLVM.IntegerType}})
precompile(Tuple{typeof(LLVM.Interop.create_function), LLVM.VoidType, Array{LLVM.LLVMType, 1}})
precompile(Tuple{Type{LLVM.BitCastInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.inbounds_gep!), LLVM.Builder, LLVM.BitCastInst, Array{LLVM.Argument, 1}})
precompile(Tuple{Type{LLVM.GetElementPtrInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.store!), LLVM.Builder, LLVM.Argument, LLVM.GetElementPtrInst})
precompile(Tuple{Type{LLVM.StoreInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{LLVM.Interop.var"#tbaa_addrspace##kw", NamedTuple{(:ctx,), Tuple{LLVM.Context}}, typeof(LLVM.Interop.tbaa_addrspace), Int64})
precompile(Tuple{typeof(Base.vect), LLVM.MDString, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.MDString, LLVM.MDTuple, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.MDTuple, LLVM.ConstantInt, Vararg{LLVM.ConstantInt}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{LLVM.MDString, LLVM.MDTuple, LLVM.ConstantInt}})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.Metadata, 1}, LLVM.MDString, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.Metadata, 1}, LLVM.MDTuple, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.Metadata, 1}, LLVM.ConstantInt, Int64})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{LLVM.API.LLVMOpaqueMetadata}}, LLVM.MDString})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{LLVM.API.LLVMOpaqueMetadata}}, LLVM.MDTuple})
precompile(Tuple{typeof(Base.vect), LLVM.MDTuple, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.MDTuple, LLVM.MDTuple, Vararg{Any}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{LLVM.MDTuple, LLVM.MDTuple, LLVM.ConstantInt, LLVM.ConstantInt}})
precompile(Tuple{typeof(LLVM.metadata), LLVM.StoreInst})
precompile(Tuple{typeof(LLVM.API.LLVMSetMetadata), LLVM.StoreInst, LLVM.MD, LLVM.MetadataAsValue})
precompile(Tuple{typeof(LLVM.alignment!), LLVM.StoreInst, Int64})
precompile(Tuple{typeof(LLVM.Interop.call_function), LLVM.Function, Type, Type, Symbol, Vararg{Any}})
precompile(Tuple{typeof(Base.something), Type, Type})
precompile(Tuple{typeof(Base.func_for_method_checked), Method, Any, Core.SimpleVector})
precompile(Tuple{typeof(Base.cconvert), Type, UInt64})
precompile(Tuple{typeof(Base.convert), Type{UInt64}, UInt64})
precompile(Tuple{GPUCompiler.var"##emit_llvm#107", Bool, Bool, Bool, Bool, LLVM.Context, typeof(GPUCompiler.emit_llvm), GPUCompiler.CompilerJob{T, P, F} where F where P where T, Any})
precompile(Tuple{typeof(LLVM.module_pass_callback), Ptr{Nothing}, Ptr{Nothing}})
precompile(Tuple{GPUCompiler.var"#irgen##kw", NamedTuple{(:ctx,), Tuple{LLVM.Context}}, typeof(GPUCompiler.irgen), GPUCompiler.CompilerJob{T, P, F} where F where P where T, Core.MethodInstance})
precompile(Tuple{typeof(GPUCompiler.ci_cache_lookup), GPUCompiler.CodeCache, Core.MethodInstance, UInt64, Int32})
precompile(Tuple{typeof(GPUCompiler.llvm_debug_info), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, P, F} where F where P})
precompile(Tuple{GPUCompiler.var"#lookup_fun#61"{Array{Any, 1}, GPUCompiler.CodeCache}, Core.MethodInstance, UInt64, UInt64})
precompile(Tuple{Type{NamedTuple{(:ci, :func, :specfunc), T} where T<:Tuple}, Tuple{Core.CodeInstance, String, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, NamedTuple{(:ci, :func, :specfunc), Tuple{Core.CodeInstance, String, String}}, Core.MethodInstance})
precompile(Tuple{typeof(GPUCompiler.llvm_triple), GPUCompiler.PTXCompilerTarget})
precompile(Tuple{typeof(LLVM.triple!), LLVM.Module, String})
precompile(Tuple{typeof(GPUCompiler.julia_datalayout), GPUCompiler.AbstractCompilerTarget})
precompile(Tuple{typeof(GPUCompiler.llvm_datalayout), GPUCompiler.PTXCompilerTarget})
precompile(Tuple{Type{LLVM.DataLayout}, String})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:ci, :func, :specfunc), Tuple{Core.CodeInstance, String, String}}, Symbol})
precompile(Tuple{typeof(GPUCompiler.process_module!), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, P, F} where F where P, LLVM.Module})
precompile(Tuple{typeof(GPUCompiler.mangle_call), LLVM.Function, Type})
precompile(Tuple{typeof(GPUCompiler.mangle_param), Type, Array{String, 1}})
precompile(Tuple{typeof(GPUCompiler.mangle_param), Int64, Array{String, 1}})
precompile(Tuple{typeof(GPUCompiler.process_entry!), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, P, F} where F where P, LLVM.Module, LLVM.Function})
precompile(Tuple{typeof(GPUCompiler.process_entry!), GPUCompiler.CompilerJob{T, P, F} where F where P where T, LLVM.Module, LLVM.Function})
precompile(Tuple{Type{LLVM.FunctionType}, Ptr{LLVM.API.LLVMOpaqueType}})
precompile(Tuple{typeof(GPUCompiler.classify_arguments), GPUCompiler.CompilerJob{T, P, F} where F where P where T, LLVM.FunctionType})
precompile(Tuple{typeof(Base.vect), Type{GPUArrays.var"#5#6"}, Vararg{DataType}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{DataType, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{DataType, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(LLVM.Interop.isghosttype), Type})
precompile(Tuple{Type{NamedTuple{(:cc, :typ), T} where T<:Tuple}, Tuple{GPUCompiler.ArgumentCC, DataType}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{DataType, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:cc, :typ, :codegen), T} where T<:Tuple}, Tuple{GPUCompiler.ArgumentCC, DataType, NamedTuple{(:typ, :i), Tuple{LLVM.PointerType, Int64}}}})
precompile(Tuple{Type{NamedTuple{(:typ, :i), T} where T<:Tuple}, Tuple{LLVM.LLVMDouble, Int64}})
precompile(Tuple{Type{NamedTuple{(:cc, :typ, :codegen), T} where T<:Tuple}, Tuple{GPUCompiler.ArgumentCC, DataType, NamedTuple{(:typ, :i), Tuple{LLVM.LLVMDouble, Int64}}}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:cc, :typ), Tuple{GPUCompiler.ArgumentCC, DataType}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), GPUCompiler.ArgumentCC, GPUCompiler.ArgumentCC})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:cc, :typ, :codegen), Tuple{GPUCompiler.ArgumentCC, DataType, NamedTuple{(:typ, :i), Tuple{LLVM.PointerType, Int64}}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:typ, :i), Tuple{LLVM.PointerType, Int64}}, Symbol})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:ctx,), Tuple{LLVM.Context}}, Type{LLVM.TypeAttribute}, String, LLVM.StructType})
precompile(Tuple{typeof(LLVM.parameter_attributes), LLVM.Function, Int64})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:cc, :typ, :codegen), Tuple{GPUCompiler.ArgumentCC, DataType, NamedTuple{(:typ, :i), Tuple{LLVM.LLVMDouble, Int64}}}}, Symbol})
precompile(Tuple{typeof(LLVM.name), LLVM.Function})
precompile(Tuple{typeof(LLVM.linkage!), LLVM.Function, LLVM.API.LLVMLinkage})
precompile(Tuple{typeof(LLVM.function_pass_callback), Ptr{Nothing}, Ptr{Nothing}})
precompile(Tuple{typeof(GPUCompiler.add_lowering_passes!), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, P, F} where F where P, LLVM.ModulePassManager})
precompile(Tuple{typeof(GPUCompiler.lower_throw!), LLVM.Module})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, GPUCompiler.Runtime.RuntimeMethodInstance}, Symbol})
precompile(Tuple{typeof(Base.vect), LLVM.ConstantExpr})
precompile(Tuple{typeof(LLVM.call!), LLVM.Builder, GPUCompiler.Runtime.RuntimeMethodInstance, Array{LLVM.ConstantExpr, 1}})
precompile(Tuple{Base.var"#convert##kw", NamedTuple{(:ctx, :allow_boxed), Tuple{LLVM.Context, Bool}}, typeof(Base.convert), Type{LLVM.LLVMType}, Type})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.LLVMType, 1}, LLVM.IntegerType, Int64})
precompile(Tuple{Type{LLVM.FunctionType}, LLVM.VoidType, Array{LLVM.LLVMType, 1}})
precompile(Tuple{typeof(LLVM.ptrtoint!), LLVM.Builder, LLVM.ConstantExpr, LLVM.IntegerType})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.ConstantExpr, 1}, LLVM.ConstantExpr, Int64})
precompile(Tuple{typeof(GPUCompiler.emit_trap!), GPUCompiler.CompilerJob{T, P, F} where F where P where T, LLVM.Builder, LLVM.Module, LLVM.CallInst})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.Value, 1}, LLVM.ConstantExpr, Int64})
precompile(Tuple{typeof(GPUCompiler.hide_trap!), LLVM.Module})
precompile(Tuple{typeof(Base.getproperty), GPUCompiler.PTXCompilerTarget, Symbol})
precompile(Tuple{typeof(LLVM.API.LLVMConstInlineAsm), LLVM.FunctionType, String, String, Int32, Int32})
precompile(Tuple{typeof(LLVM.refcheck), Type{LLVM.InlineAsm}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.API.LLVMBuildCall), LLVM.Builder, LLVM.InlineAsm, Array{LLVM.Value, 1}, Int64, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, Core.MethodInstance})
precompile(Tuple{typeof(Base.lock), GPUCompiler.var"#89#92"{LLVM.Context, GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{GPUArrays.var"#5#6", Tuple{CUDA.CuKernelContext, CUDA.CuDeviceArray{Float64, 1, 1}, Float64}}}}, Base.ReentrantLock})
precompile(Tuple{typeof(GPUCompiler.runtime_slug), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, P, F} where F where P})
precompile(Tuple{typeof(Base.filter), GPUCompiler.var"#1#2", Array{LLVM.Function, 1}})
precompile(Tuple{typeof(Base.filter), GPUCompiler.var"#3#4", Array{LLVM.Function, 1}})
precompile(Tuple{typeof(GPUCompiler.link_libraries!), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, F} where F, LLVM.Module, Array{String, 1}})
precompile(Tuple{typeof(Base._any), CUDA.var"#132#133", Array{String, 1}, Base.Colon})
precompile(Tuple{typeof(GPUCompiler.finish_module!), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, P, F} where F where P, LLVM.Module, LLVM.Function})
precompile(Tuple{typeof(GPUCompiler.lower_byval), GPUCompiler.CompilerJob{T, P, F} where F where P where T, LLVM.Module, LLVM.Function})
precompile(Tuple{GPUCompiler.var"#67#73"{LLVM.Context}, LLVM.EnumAttribute})
precompile(Tuple{GPUCompiler.var"#67#73"{LLVM.Context}, LLVM.TypeAttribute})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(LLVM.user), Tuple{Base.Broadcast.Extruded{Array{LLVM.Use, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{LLVM.GetElementPtrInst}})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.GetElementPtrInst, 1}, LLVM.GetElementPtrInst, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{LLVM.GetElementPtrInst, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(LLVM.user), Tuple{Base.Broadcast.Extruded{Array{LLVM.Use, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Array{LLVM.Instruction, 1}}, Array{LLVM.GetElementPtrInst, 1}})
precompile(Tuple{typeof(Base.isempty), Array{LLVM.Instruction, 1}})
precompile(Tuple{typeof(Base.popfirst!), Array{LLVM.Instruction, 1}})
precompile(Tuple{typeof(LLVM.metadata), LLVM.GetElementPtrInst})
precompile(Tuple{Type{LLVM.LoadInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(LLVM.user), Tuple{Base.Broadcast.Extruded{Array{LLVM.Use, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{LLVM.LoadInst}})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.LoadInst, 1}, LLVM.LoadInst, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{LLVM.LoadInst, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(LLVM.user), Tuple{Base.Broadcast.Extruded{Array{LLVM.Use, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.append!), Array{LLVM.Instruction, 1}, Array{LLVM.LoadInst, 1}})
precompile(Tuple{typeof(LLVM.metadata), LLVM.LoadInst})
precompile(Tuple{typeof(LLVM.alloca!), LLVM.Builder, LLVM.StructType})
precompile(Tuple{Type{LLVM.AllocaInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.addrspacecast!), LLVM.Builder, LLVM.AllocaInst, LLVM.PointerType})
precompile(Tuple{Type{LLVM.AddrSpaceCastInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.store!), LLVM.Builder, LLVM.Argument, LLVM.AddrSpaceCastInst})
precompile(Tuple{typeof(Base.push!), Array{LLVM.Value, 1}, LLVM.AddrSpaceCastInst})
precompile(Tuple{typeof(Base.push!), Array{LLVM.Value, 1}, LLVM.Argument})
precompile(Tuple{typeof(Base.getindex), Array{LLVM.Value, 1}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, LLVM.Argument, LLVM.AddrSpaceCastInst})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{LLVM.Value, LLVM.Value}, LLVM.AddrSpaceCastInst, LLVM.Argument})
precompile(Tuple{Type{Pair{A, B} where B where A}, LLVM.Argument, LLVM.Argument})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{LLVM.Value, LLVM.Value}, LLVM.Argument, LLVM.Argument})
precompile(Tuple{Type{LLVM.BrInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.replace_metadata_uses!), LLVM.Function, LLVM.ConstantExpr})
precompile(Tuple{LLVM.var"#recurse#15"{LLVM.Function, LLVM.Context, LLVM.ConstantExpr}, LLVM.NamedMDNode})
precompile(Tuple{Type{LLVM.MDTuple}, Ptr{LLVM.API.LLVMOpaqueMetadata}})
precompile(Tuple{typeof(Base._array_for), Type{LLVM.MDTuple}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{LLVM.MDTuple, 1}, LLVM.MDTuple, Base.Generator{Array{Ptr{LLVM.API.LLVMOpaqueMetadata}, 1}, LLVM.var"#42#43"}, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{LLVM.MDTuple, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{LLVM.MDTuple, 1}}, Tuple{Int64}})
precompile(Tuple{LLVM.var"#recurse#15"{LLVM.Function, LLVM.Context, LLVM.ConstantExpr}, LLVM.MDTuple})
precompile(Tuple{typeof(Base._array_for), Type{LLVM.ConstantAsMetadata}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{LLVM.ConstantAsMetadata, 1}, LLVM.ConstantAsMetadata, Base.Generator{Array{Ptr{LLVM.API.LLVMOpaqueMetadata}, 1}, LLVM.var"#36#37"}, Int64})
precompile(Tuple{Type{LLVM.MDString}, Ptr{LLVM.API.LLVMOpaqueMetadata}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{LLVM.ConstantAsMetadata, 1}, LLVM.MDString, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{LLVM.Metadata, 1}, Base.Generator{Array{Ptr{LLVM.API.LLVMOpaqueMetadata}, 1}, LLVM.var"#36#37"}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{LLVM.Metadata, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{LLVM.Metadata, 1}}, Tuple{Int64}})
precompile(Tuple{Type{LLVM.ConstantInt}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Base.:(==)), LLVM.ConstantInt, LLVM.ConstantExpr})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{LLVM.Metadata, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{LLVM.MDTuple, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{LLVM.DICompileUnit}, Ptr{LLVM.API.LLVMOpaqueMetadata}})
precompile(Tuple{typeof(Base._array_for), Type{LLVM.DICompileUnit}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{LLVM.DICompileUnit, 1}, LLVM.DICompileUnit, Base.Generator{Array{Ptr{LLVM.API.LLVMOpaqueMetadata}, 1}, LLVM.var"#42#43"}, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{LLVM.DICompileUnit, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{LLVM.DICompileUnit, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{LLVM.DICompileUnit, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Pair{A, B} where B where A}, GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{GPUArrays.var"#5#6", Tuple{CUDA.CuKernelContext, CUDA.CuDeviceArray{Float64, 1, 1}, Float64}}}, String})
precompile(Tuple{Type{Base.Dict{GPUCompiler.CompilerJob{T, P, F} where F where P where T, String}}, Pair{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{GPUArrays.var"#5#6", Tuple{CUDA.CuKernelContext, CUDA.CuDeviceArray{Float64, 1, 1}, Float64}}}, String}})
precompile(Tuple{typeof(Base.vect), LLVM.Function})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:ctx,), Tuple{LLVM.Context}}, Type{LLVM.MDNode}, Array{LLVM.Function, 1}})
precompile(Tuple{typeof(GPUCompiler.optimize!), GPUCompiler.CompilerJob{T, P, F} where F where P where T, LLVM.Module})
precompile(Tuple{typeof(GPUCompiler.llvm_machine), GPUCompiler.PTXCompilerTarget})
precompile(Tuple{LLVM.var"##Target#71", Nothing, String, Type{LLVM.Target}})
precompile(Tuple{typeof(LLVM.API.LLVMCreateTargetMachine), LLVM.Target, String, String, String, LLVM.API.LLVMCodeGenOptLevel, LLVM.API.LLVMRelocMode, LLVM.API.LLVMCodeModel})
precompile(Tuple{typeof(GPUCompiler.addTargetPasses!), LLVM.ModulePassManager, LLVM.TargetMachine, String})
precompile(Tuple{typeof(LLVM.API.LLVMCreateModulePass2), String, Ptr{Nothing}, Base.RefValue{typeof(GPUCompiler.cpu_features!)}})
precompile(Tuple{typeof(GPUCompiler.cpu_features!), LLVM.Module})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, DataType}, Type, String})
precompile(Tuple{typeof(GPUCompiler.lower_gc_frame!), LLVM.Function})
precompile(Tuple{typeof(GPUCompiler.add_kernel_state!), LLVM.Module})
precompile(Tuple{typeof(GPUCompiler.kernel_state_intr), LLVM.Module, LLVM.ArrayType})
precompile(Tuple{typeof(Base.getindex), Array{LLVM.MDTuple, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{LLVM.ConstantAsMetadata, 1}, Int64})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:ctx,), Tuple{LLVM.Context}}, Type{LLVM.Value}, LLVM.ConstantAsMetadata})
precompile(Tuple{Type{LLVM.Function}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Base.vect), LLVM.Function, Vararg{LLVM.Function}})
precompile(Tuple{Type{Base.Set{LLVM.Function}}, Array{LLVM.Function, 1}})
precompile(Tuple{GPUCompiler.var"#check_user#76"{Base.Set{LLVM.Function}, Array{LLVM.Function, 1}}, LLVM.ConstantExpr})
precompile(Tuple{typeof(Base.vect), LLVM.ArrayType, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.ArrayType, LLVM.StructType, Vararg{Any}})
precompile(Tuple{typeof(Base.copyto!), Array{LLVM.LLVMType, 1}, Tuple{LLVM.ArrayType, LLVM.StructType, LLVM.LLVMDouble}})
precompile(Tuple{Type{NamedTuple{(:value_map, :materializer, :changes), T} where T<:Tuple}, Tuple{Base.Dict{LLVM.Value, LLVM.Value}, GPUCompiler.var"#materializer#77"{Base.Dict{LLVM.Function, LLVM.Function}, LLVM.ArrayType}, LLVM.API.LLVMCloneFunctionChangeType}})
precompile(Tuple{LLVM.var"#clone_into!##kw", NamedTuple{(:value_map, :materializer, :changes), Tuple{Base.Dict{LLVM.Value, LLVM.Value}, GPUCompiler.var"#materializer#77"{Base.Dict{LLVM.Function, LLVM.Function}, LLVM.ArrayType}, LLVM.API.LLVMCloneFunctionChangeType}}, typeof(LLVM.clone_into!), LLVM.Function, LLVM.Function})
precompile(Tuple{LLVM.var"##clone_into!#83", Base.Dict{LLVM.Value, LLVM.Value}, LLVM.API.LLVMCloneFunctionChangeType, String, Nothing, Function, typeof(LLVM.clone_into!), LLVM.Function, LLVM.Function})
precompile(Tuple{Type{Base.RefValue{T} where T}, GPUCompiler.var"#materializer#77"{Base.Dict{LLVM.Function, LLVM.Function}, LLVM.ArrayType}})
precompile(Tuple{typeof(LLVM.API.LLVMCloneFunctionInto), LLVM.Function, LLVM.Function, Array{LLVM.Value, 1}, Int64, LLVM.API.LLVMCloneFunctionChangeType, String, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Base.RefValue{GPUCompiler.var"#materializer#77"{Base.Dict{LLVM.Function, LLVM.Function}, LLVM.ArrayType}}})
precompile(Tuple{typeof(LLVM.materializer_callback), Ptr{LLVM.API.LLVMOpaqueValue}, Base.RefValue{GPUCompiler.var"#materializer#77"{Base.Dict{LLVM.Function, LLVM.Function}, LLVM.ArrayType}}})
precompile(Tuple{GPUCompiler.var"#materializer#77"{Base.Dict{LLVM.Function, LLVM.Function}, LLVM.ArrayType}, LLVM.Function})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{LLVM.API.LLVMOpaqueValue}}, LLVM.Function})
precompile(Tuple{GPUCompiler.var"#materializer#77"{Base.Dict{LLVM.Function, LLVM.Function}, LLVM.ArrayType}, LLVM.ConstantInt})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{LLVM.API.LLVMOpaqueValue}}, LLVM.ConstantInt})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{LLVM.ConstantAsMetadata, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{LLVM.ConstantAsMetadata, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(==)), LLVM.ConstantExpr, LLVM.ConstantExpr})
precompile(Tuple{typeof(LLVM.replace_operand), LLVM.MDTuple, Int64, LLVM.ConstantAsMetadata})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{LLVM.ConstantAsMetadata, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{GPUCompiler.var"#rewrite_uses!#78"{LLVM.Function, LLVM.Context}, LLVM.Function})
precompile(Tuple{GPUCompiler.var"#rewrite_uses!#78"{LLVM.Function, LLVM.Context}, LLVM.ConstantExpr})
precompile(Tuple{typeof(GPUCompiler.lower_kernel_state!), LLVM.Function})
precompile(Tuple{typeof(GPUCompiler.cleanup_kernel_state!), LLVM.Module})
precompile(Tuple{typeof(GPUCompiler.lower_ptls!), LLVM.Module})
precompile(Tuple{typeof(LLVM.uses), LLVM.CallInst})
precompile(Tuple{typeof(LLVM.parent), LLVM.CallInst})
precompile(Tuple{typeof(LLVM.unsafe_delete!), LLVM.BasicBlock, LLVM.CallInst})
precompile(Tuple{typeof(GPUCompiler.optimize_module!), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, P, F} where F where P, LLVM.Module})
precompile(Tuple{typeof(GPUCompiler.nvvm_reflect!), LLVM.Function})
precompile(Tuple{typeof(GPUCompiler.finish_ir!), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, P, F} where F where P, LLVM.Module, LLVM.Function})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{LLVM.MDString, LLVM.ConstantInt}})
precompile(Tuple{Type{NamedTuple{(:entry, :compiled), T} where T<:Tuple}, Tuple{LLVM.Function, Base.Dict{Any, Any}}})
precompile(Tuple{GPUCompiler.var"#emit_asm##kw", NamedTuple{(:format,), Tuple{LLVM.API.LLVMCodeGenFileType}}, typeof(GPUCompiler.emit_asm), GPUCompiler.CompilerJob{T, P, F} where F where P where T, LLVM.Module})
precompile(Tuple{typeof(Base.Iterators.enumerate), Core.SimpleVector})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Core.SimpleVector}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Core.SimpleVector}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(GPUCompiler.check_ir), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{GPUArrays.var"#5#6", Tuple{CUDA.CuKernelContext, CUDA.CuDeviceArray{Float64, 1, 1}, Float64}}}, LLVM.Module})
precompile(Tuple{Type{LLVM.ExtractValueInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{Base.Dict{LLVM.Instruction, Nothing}}})
precompile(Tuple{typeof(Base.in), LLVM.CallInst, Base.Set{LLVM.Instruction}})
precompile(Tuple{typeof(Base.push!), Base.Set{LLVM.Instruction}, LLVM.CallInst})
precompile(Tuple{typeof(Base.getindex), LLVM.InstructionMetadataDict, LLVM.MD})
precompile(Tuple{Type{LLVM.DILocation}, Ptr{LLVM.API.LLVMOpaqueMetadata}})
precompile(Tuple{Type{LLVM.DISubProgram}, Ptr{LLVM.API.LLVMOpaqueMetadata}})
precompile(Tuple{typeof(LLVM.name), LLVM.DISubProgram})
precompile(Tuple{typeof(LLVM.refcheck), Type{LLVM.DIFile}, Ptr{LLVM.API.LLVMOpaqueMetadata}})
precompile(Tuple{typeof(LLVM.line), LLVM.DILocation})
precompile(Tuple{Type{Base.StackTraces.StackFrame}, String, String, Int64})
precompile(Tuple{typeof(Base.filter), GPUCompiler.var"#98#101", Array{LLVM.Use, 1}})
precompile(Tuple{typeof(Base.filter!), GPUCompiler.var"#99#102", Array{LLVM.Use, 1}})
precompile(Tuple{Type{LLVM.AddInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.ZExtInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.MulInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.ICmpInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(GPUCompiler.resolve_cpu_references!), LLVM.Module})
precompile(Tuple{typeof(GPUCompiler.mcgen), GPUCompiler.CompilerJob{T, P, F} where F where P where T, LLVM.Module, LLVM.API.LLVMCodeGenFileType})
precompile(Tuple{typeof(Base.replace), String, Pair{Base.Regex, Base.SubstitutionString{String}}})
precompile(Tuple{typeof(Base._shrink), Function, Array{String, 1}, Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{String}, Array{String, 1}})
precompile(Tuple{typeof(Base.vectorfilter), Function, Array{String, 1}})
precompile(Tuple{typeof(Base.filter), Base.var"#115#116"{typeof(Base.in), typeof(Base.pop!), Base.Set{String}}, Array{String, 1}})
precompile(Tuple{typeof(Base.string), String, UInt32, Vararg{Any}})
precompile(Tuple{typeof(Base.isassigned), Base.RefValue{String}})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{String}, Tuple{Array{String, 1}}}})
precompile(Tuple{Base.var"##run#707", Bool, typeof(Base.run), Base.CmdRedirect})
precompile(Tuple{typeof(Base.setup_stdio), Base.Pipe, Bool})
precompile(Tuple{typeof(Base.setproperty!), Base.Process, Symbol, Base.DevNull})
precompile(Tuple{CUDA.var"#163#165"})
precompile(Tuple{CUDA.var"#222#223"{Base.Pipe}})
precompile(Tuple{typeof(Base.strip), String})
precompile(Tuple{typeof(Base.strip), Base.SubString{String}})
precompile(Tuple{Type{NamedTuple{(:image, :entry, :external_gvars), T} where T<:Tuple}, Tuple{Array{UInt8, 1}, String, Array{String, 1}}})
precompile(Tuple{typeof(CUDA.cufunction_link), GPUCompiler.CompilerJob{T, P, F} where F where P where T, NamedTuple{(:image, :entry, :external_gvars), Tuple{Array{UInt8, 1}, String, Array{String, 1}}}})
precompile(Tuple{Type{Base.Dict{CUDA.CUjit_option_enum, Any}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{CUDA.CUjit_option_enum, Any}, Array{UInt8, 1}, CUDA.CUjit_option_enum})
precompile(Tuple{typeof(Base.hash), CUDA.CuFunction, UInt64})
precompile(Tuple{typeof(Base.get), Base.Dict{UInt64, Any}, UInt64, Nothing})
precompile(Tuple{typeof(Base.getproperty), CUDA.CuFunction, Symbol})
precompile(Tuple{typeof(Base.get!), Base.var"#190#191"{CUDA.Mem.HostBuffer}, Base.Dict{CUDA.CuContext, CUDA.Mem.HostBuffer}, CUDA.CuContext})
precompile(Tuple{Type{CUDA.HostKernel{GPUArrays.var"#5#6", Tuple{CUDA.CuKernelContext, CUDA.CuDeviceArray{Float64, 1, 1}, Float64}}}, Function, CUDA.CuFunction, CUDA.KernelState})
precompile(Tuple{typeof(Base.hash), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{typeof(Main.reduce_grid_atomic), Tuple{typeof(Base.:(+)), CUDA.CuDeviceArray{Float64, 3, 1}, CUDA.CuDeviceArray{Float64, 1, 1}}}}, UInt64})
precompile(Tuple{typeof(GPUCompiler.JuliaContext), CUDA.var"#224#225"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{typeof(Main.reduce_grid_atomic), Tuple{typeof(Base.:(+)), CUDA.CuDeviceArray{Float64, 3, 1}, CUDA.CuDeviceArray{Float64, 1, 1}}}}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{LLVM.LLVMType, Int64}}})
precompile(Tuple{LLVM.Interop.var"##s827#7", Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.copyto!), Array{LLVM.LLVMType, 1}, Tuple{LLVM.PointerType, LLVM.IntegerType}})
precompile(Tuple{typeof(LLVM.Interop.create_function), LLVM.LLVMDouble, Array{LLVM.LLVMType, 1}})
precompile(Tuple{typeof(LLVM.load!), LLVM.Builder, LLVM.GetElementPtrInst})
precompile(Tuple{typeof(LLVM.API.LLVMSetMetadata), LLVM.LoadInst, LLVM.MD, LLVM.MetadataAsValue})
precompile(Tuple{typeof(LLVM.alignment!), LLVM.LoadInst, Int64})
precompile(Tuple{typeof(LLVM.ret!), LLVM.Builder, LLVM.LoadInst})
precompile(Tuple{CUDA.var"##s2340#120", Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.copyto!), Array{LLVM.LLVMType, 1}, Tuple{LLVM.PointerType, LLVM.LLVMDouble}})
precompile(Tuple{typeof(LLVM.atomic_rmw!), LLVM.Builder, LLVM.API.LLVMAtomicRMWBinOp, LLVM.BitCastInst, LLVM.Argument, LLVM.API.LLVMAtomicOrdering, Bool})
precompile(Tuple{Type{LLVM.AtomicRMWInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.ret!), LLVM.Builder, LLVM.AtomicRMWInst})
precompile(Tuple{CUDA.var"##s2340#121", Any, Any, Any, Any, Any, Any})
precompile(Tuple{Type{LLVM.PointerType}, LLVM.IntegerType, Int64})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.PointerType, LLVM.IntegerType, Vararg{LLVM.IntegerType}})
precompile(Tuple{typeof(Base.copyto!), Array{LLVM.LLVMType, 1}, Tuple{LLVM.PointerType, LLVM.IntegerType, LLVM.IntegerType}})
precompile(Tuple{typeof(LLVM.Interop.create_function), LLVM.IntegerType, Array{LLVM.LLVMType, 1}})
precompile(Tuple{typeof(LLVM.atomic_cmpxchg!), LLVM.Builder, LLVM.BitCastInst, LLVM.Argument, LLVM.Argument, LLVM.API.LLVMAtomicOrdering, LLVM.API.LLVMAtomicOrdering, Bool})
precompile(Tuple{Type{LLVM.AtomicCmpXchgInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.extract_value!), LLVM.Builder, LLVM.AtomicCmpXchgInst, Int64})
precompile(Tuple{typeof(LLVM.ret!), LLVM.Builder, LLVM.ExtractValueInst})
precompile(Tuple{typeof(Base.vect), Type{typeof(Main.reduce_grid_atomic)}, Vararg{DataType}})
precompile(Tuple{typeof(Base.lock), GPUCompiler.var"#89#92"{LLVM.Context, GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{typeof(Main.reduce_grid_atomic), Tuple{typeof(Base.:(+)), CUDA.CuDeviceArray{Float64, 3, 1}, CUDA.CuDeviceArray{Float64, 1, 1}}}}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{LLVM.Module, 1}, GPUCompiler.var"#84#85"}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(LLVM.user), Tuple{Base.Broadcast.Extruded{Array{LLVM.Use, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{LLVM.CallInst}})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.CallInst, 1}, LLVM.CallInst, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{LLVM.CallInst, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(LLVM.user), Tuple{Base.Broadcast.Extruded{Array{LLVM.Use, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(LLVM.user), Tuple{Base.Broadcast.Extruded{Array{LLVM.Use, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{LLVM.Instruction}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{LLVM.Instruction, 1}, Array{LLVM.CallInst, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(LLVM.user), Tuple{Base.Broadcast.Extruded{Array{LLVM.Use, 1}, Tuple{Bool}, Tuple{Int64}}}}, LLVM.GetElementPtrInst, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{LLVM.Instruction, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(LLVM.user), Tuple{Base.Broadcast.Extruded{Array{LLVM.Use, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.Instruction, 1}, LLVM.GetElementPtrInst, Int64})
precompile(Tuple{Type{Array{LLVM.Instruction, 1}}, Array{LLVM.Instruction, 1}})
precompile(Tuple{Type{Pair{A, B} where B where A}, GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{typeof(Main.reduce_grid_atomic), Tuple{typeof(Base.:(+)), CUDA.CuDeviceArray{Float64, 3, 1}, CUDA.CuDeviceArray{Float64, 1, 1}}}}, String})
precompile(Tuple{Type{Base.Dict{GPUCompiler.CompilerJob{T, P, F} where F where P where T, String}}, Pair{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{typeof(Main.reduce_grid_atomic), Tuple{typeof(Base.:(+)), CUDA.CuDeviceArray{Float64, 3, 1}, CUDA.CuDeviceArray{Float64, 1, 1}}}}, String}})
precompile(Tuple{GPUCompiler.var"#check_user#76"{Base.Set{LLVM.Function}, Array{LLVM.Function, 1}}, LLVM.CallInst})
precompile(Tuple{Type{Array{LLVM.SequentialType, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{LLVM.SequentialType, 1}, Tuple{LLVM.ArrayType, LLVM.StructType, LLVM.StructType}})
precompile(Tuple{Type{LLVM.FunctionType}, LLVM.VoidType, Array{LLVM.SequentialType, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{LLVM.LLVMType, 1}, Tuple{LLVM.ArrayType, LLVM.IntegerType}})
precompile(Tuple{Type{LLVM.FunctionType}, LLVM.PointerType, Array{LLVM.LLVMType, 1}})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.ArrayType, LLVM.PointerType, Vararg{LLVM.PointerType}})
precompile(Tuple{typeof(Base.copyto!), Array{LLVM.SequentialType, 1}, Tuple{LLVM.ArrayType, LLVM.PointerType, LLVM.PointerType}})
precompile(Tuple{Type{LLVM.FunctionType}, LLVM.PointerType, Array{LLVM.SequentialType, 1}})
precompile(Tuple{typeof(Base.vect), LLVM.ArrayType})
precompile(Tuple{Type{LLVM.FunctionType}, LLVM.VoidType, Array{LLVM.ArrayType, 1}})
precompile(Tuple{GPUCompiler.var"#materializer#77"{Base.Dict{LLVM.Function, LLVM.Function}, LLVM.ArrayType}, LLVM.ConstantExpr})
precompile(Tuple{Type{LLVM.GlobalVariable}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{LLVM.API.LLVMOpaqueValue}}, LLVM.ConstantExpr})
precompile(Tuple{Type{LLVM.InlineAsm}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{GPUCompiler.var"#materializer#77"{Base.Dict{LLVM.Function, LLVM.Function}, LLVM.ArrayType}, LLVM.InlineAsm})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{LLVM.API.LLVMOpaqueValue}}, LLVM.InlineAsm})
precompile(Tuple{Type{LLVM.PointerNull}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{GPUCompiler.var"#materializer#77"{Base.Dict{LLVM.Function, LLVM.Function}, LLVM.ArrayType}, LLVM.PointerNull})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{LLVM.API.LLVMOpaqueValue}}, LLVM.PointerNull})
precompile(Tuple{typeof(Base.:(==)), LLVM.Function, LLVM.ConstantExpr})
precompile(Tuple{typeof(Base.:(==)), LLVM.Function, LLVM.Function})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.Value, 1}, LLVM.AddrSpaceCastInst, Int64})
precompile(Tuple{typeof(Base.vect), LLVM.CallInst, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.CallInst, LLVM.AddrSpaceCastInst, Vararg{LLVM.AddrSpaceCastInst}})
precompile(Tuple{Type{Array{LLVM.Instruction, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{LLVM.Instruction, 1}, Tuple{LLVM.CallInst, LLVM.AddrSpaceCastInst, LLVM.AddrSpaceCastInst}})
precompile(Tuple{typeof(LLVM.call!), LLVM.Builder, LLVM.Function, Array{LLVM.Instruction, 1}, LLVM.OperandBundleIterator})
precompile(Tuple{typeof(LLVM.callconv!), LLVM.CallInst, UInt32})
precompile(Tuple{typeof(LLVM.replace_uses!), LLVM.CallInst, LLVM.CallInst})
precompile(Tuple{typeof(Base.vect), LLVM.CallInst})
precompile(Tuple{typeof(LLVM.call!), LLVM.Builder, LLVM.Function, Array{LLVM.CallInst, 1}, LLVM.OperandBundleIterator})
precompile(Tuple{typeof(Base.:(==)), LLVM.ArrayType, LLVM.ArrayType})
precompile(Tuple{typeof(GPUCompiler.check_ir), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{typeof(Main.reduce_grid_atomic), Tuple{typeof(Base.:(+)), CUDA.CuDeviceArray{Float64, 3, 1}, CUDA.CuDeviceArray{Float64, 1, 1}}}}, LLVM.Module})
precompile(Tuple{Base.var"##unique#326", Nothing, typeof(Base.unique), GPUCompiler.var"#100#103", Array{LLVM.Use, 1}})
precompile(Tuple{Type{Base.Set{LLVM.DILocation}}})
precompile(Tuple{typeof(Base.push!), Base.Set{LLVM.DILocation}, LLVM.DILocation})
precompile(Tuple{typeof(Base._unique!), GPUCompiler.var"#100#103", Array{LLVM.Use, 1}, Array{LLVM.Use, 1}, Base.Set{LLVM.DILocation}, Int64})
precompile(Tuple{typeof(GPUCompiler.isintrinsic), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, _A} where _A, String})
precompile(Tuple{Type{LLVM.ShlInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.PHIInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.OrInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.FAddInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.SelectInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.UnreachableInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.IntToPtrInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{CUDA.HostKernel{typeof(Main.reduce_grid_atomic), Tuple{typeof(Base.:(+)), CUDA.CuDeviceArray{Float64, 3, 1}, CUDA.CuDeviceArray{Float64, 1, 1}}}}, Function, CUDA.CuFunction, CUDA.KernelState})
precompile(Tuple{typeof(Adapt.adapt), CUDA.Adaptor, Function})
precompile(Tuple{typeof(Adapt.adapt_structure), CUDA.Adaptor, typeof(Base.:(+))})
precompile(Tuple{typeof(CUDA.cufunction), typeof(Main.reduce_grid_atomic), Type{Tuple{typeof(Base.:(+)), CUDA.CuDeviceArray{Float64, 3, 1}, CUDA.CuDeviceArray{Float64, 1, 1}}}})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:threads, :blocks), Tuple{Int64, Int64}}, CUDA.HostKernel{typeof(Main.reduce_grid_atomic), Tuple{typeof(Base.:(+)), CUDA.CuDeviceArray{Float64, 3, 1}, CUDA.CuDeviceArray{Float64, 1, 1}}}, Function, Vararg{Any}})
precompile(Tuple{CUDA.var"##_#228", Int64, Int64, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, CUDA.HostKernel{typeof(Main.reduce_grid_atomic), Tuple{typeof(Base.:(+)), CUDA.CuDeviceArray{Float64, 3, 1}, CUDA.CuDeviceArray{Float64, 1, 1}}}, Function, Vararg{Any}})
precompile(Tuple{typeof(Base.map), typeof(CUDA.cudaconvert), Tuple{typeof(Base.:(+)), CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, CUDA.CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}})
precompile(Tuple{CUDA.var"#call##kw", NamedTuple{(:threads, :blocks), Tuple{Int64, Int64}}, typeof(CUDA.call), CUDA.HostKernel{typeof(Main.reduce_grid_atomic), Tuple{typeof(Base.:(+)), CUDA.CuDeviceArray{Float64, 3, 1}, CUDA.CuDeviceArray{Float64, 1, 1}}}, Function, Vararg{Any}})
precompile(Tuple{CUDA.var"##call#207", Base.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:threads, :blocks), Tuple{Int64, Int64}}}, typeof(CUDA.call), CUDA.HostKernel{typeof(Main.reduce_grid_atomic), Tuple{typeof(Base.:(+)), CUDA.CuDeviceArray{Float64, 3, 1}, CUDA.CuDeviceArray{Float64, 1, 1}}}, typeof(Base.:(+)), CUDA.CuDeviceArray{Float64, 3, 1}, CUDA.CuDeviceArray{Float64, 1, 1}})
precompile(Tuple{typeof(Base.hash), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{typeof(Main.reduce_grid_shared), Tuple{typeof(Base.:(+)), CUDA.CuDeviceArray{Float64, 3, 1}, CUDA.CuDeviceArray{Float64, 1, 1}}}}, UInt64})
precompile(Tuple{typeof(GPUCompiler.JuliaContext), CUDA.var"#224#225"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{typeof(Main.reduce_grid_shared), Tuple{typeof(Base.:(+)), CUDA.CuDeviceArray{Float64, 3, 1}, CUDA.CuDeviceArray{Float64, 1, 1}}}}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Type{Core.LLVMPtr{_A, 3}} where _A, Int64}}})
precompile(Tuple{CUDA.var"##s2338#85", Any, Any, Any, Any, Any})
precompile(Tuple{typeof(LLVM.Interop.create_function), LLVM.PointerType})
precompile(Tuple{Type{LLVM.ArrayType}, LLVM.IntegerType, Int64})
precompile(Tuple{Type{LLVM.ConstantAggregateZero}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.initializer!), LLVM.GlobalVariable, LLVM.ConstantAggregateZero})
precompile(Tuple{typeof(LLVM.bitcast!), LLVM.Builder, LLVM.ConstantExpr, LLVM.PointerType})
precompile(Tuple{typeof(LLVM.ret!), LLVM.Builder, LLVM.ConstantExpr})
precompile(Tuple{typeof(Base.isequal), Core.MethodInstance, Core.MethodInstance})
precompile(Tuple{typeof(Base.vect), Type{typeof(Main.reduce_grid_shared)}, Vararg{DataType}})
precompile(Tuple{typeof(Base.lock), GPUCompiler.var"#89#92"{LLVM.Context, GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{typeof(Main.reduce_grid_shared), Tuple{typeof(Base.:(+)), CUDA.CuDeviceArray{Float64, 3, 1}, CUDA.CuDeviceArray{Float64, 1, 1}}}}}, Base.ReentrantLock})
precompile(Tuple{Type{Pair{A, B} where B where A}, GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{typeof(Main.reduce_grid_shared), Tuple{typeof(Base.:(+)), CUDA.CuDeviceArray{Float64, 3, 1}, CUDA.CuDeviceArray{Float64, 1, 1}}}}, String})
precompile(Tuple{Type{Base.Dict{GPUCompiler.CompilerJob{T, P, F} where F where P where T, String}}, Pair{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{typeof(Main.reduce_grid_shared), Tuple{typeof(Base.:(+)), CUDA.CuDeviceArray{Float64, 3, 1}, CUDA.CuDeviceArray{Float64, 1, 1}}}}, String}})
precompile(Tuple{typeof(GPUCompiler.check_ir), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{typeof(Main.reduce_grid_shared), Tuple{typeof(Base.:(+)), CUDA.CuDeviceArray{Float64, 3, 1}, CUDA.CuDeviceArray{Float64, 1, 1}}}}, LLVM.Module})
precompile(Tuple{Type{CUDA.HostKernel{typeof(Main.reduce_grid_shared), Tuple{typeof(Base.:(+)), CUDA.CuDeviceArray{Float64, 3, 1}, CUDA.CuDeviceArray{Float64, 1, 1}}}}, Function, CUDA.CuFunction, CUDA.KernelState})
precompile(Tuple{typeof(CUDA.cufunction), typeof(Main.reduce_grid_shared), Type{Tuple{typeof(Base.:(+)), CUDA.CuDeviceArray{Float64, 3, 1}, CUDA.CuDeviceArray{Float64, 1, 1}}}})
precompile(Tuple{Core.var"#Any##kw", NamedTuple{(:threads, :blocks), Tuple{Int64, Int64}}, CUDA.HostKernel{typeof(Main.reduce_grid_shared), Tuple{typeof(Base.:(+)), CUDA.CuDeviceArray{Float64, 3, 1}, CUDA.CuDeviceArray{Float64, 1, 1}}}, Function, Vararg{Any}})
precompile(Tuple{CUDA.var"##_#228", Int64, Int64, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, CUDA.HostKernel{typeof(Main.reduce_grid_shared), Tuple{typeof(Base.:(+)), CUDA.CuDeviceArray{Float64, 3, 1}, CUDA.CuDeviceArray{Float64, 1, 1}}}, Function, Vararg{Any}})
precompile(Tuple{CUDA.var"#call##kw", NamedTuple{(:threads, :blocks), Tuple{Int64, Int64}}, typeof(CUDA.call), CUDA.HostKernel{typeof(Main.reduce_grid_shared), Tuple{typeof(Base.:(+)), CUDA.CuDeviceArray{Float64, 3, 1}, CUDA.CuDeviceArray{Float64, 1, 1}}}, Function, Vararg{Any}})
precompile(Tuple{CUDA.var"##call#207", Base.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:threads, :blocks), Tuple{Int64, Int64}}}, typeof(CUDA.call), CUDA.HostKernel{typeof(Main.reduce_grid_shared), Tuple{typeof(Base.:(+)), CUDA.CuDeviceArray{Float64, 3, 1}, CUDA.CuDeviceArray{Float64, 1, 1}}}, typeof(Base.:(+)), CUDA.CuDeviceArray{Float64, 3, 1}, CUDA.CuDeviceArray{Float64, 1, 1}})
precompile(Tuple{typeof(Base.hash), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#17", Tuple{CUDA.CuKernelContext, CUDA.CuDeviceArray{Float64, 1, 1}, Base.Broadcast.Broadcasted{CUDA.CuArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{CUDA.CuDeviceArray{Float64, 1, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{CUDA.CuDeviceArray{Float64, 1, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64}}}, UInt64})
precompile(Tuple{typeof(GPUCompiler.JuliaContext), CUDA.var"#224#225"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#17", Tuple{CUDA.CuKernelContext, CUDA.CuDeviceArray{Float64, 1, 1}, Base.Broadcast.Broadcasted{CUDA.CuArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{CUDA.CuDeviceArray{Float64, 1, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{CUDA.CuDeviceArray{Float64, 1, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64}}}}})
precompile(Tuple{typeof(Core.Compiler.add_call_backedges!), GPUCompiler.GPUInterpreter, Any, Array{Core.MethodInstance, 1}, Core.Compiler.UnionSplitMethodMatches, Any, Core.Compiler.InferenceState})
precompile(Tuple{typeof(Base.vect), Type{GPUArrays.var"#broadcast_kernel#17"}, Vararg{DataType}})
precompile(Tuple{Type{NamedTuple{(:typ, :i), T} where T<:Tuple}, Tuple{LLVM.IntegerType, Int64}})
precompile(Tuple{Type{NamedTuple{(:cc, :typ, :codegen), T} where T<:Tuple}, Tuple{GPUCompiler.ArgumentCC, DataType, NamedTuple{(:typ, :i), Tuple{LLVM.IntegerType, Int64}}}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:cc, :typ, :codegen), Tuple{GPUCompiler.ArgumentCC, DataType, NamedTuple{(:typ, :i), Tuple{LLVM.IntegerType, Int64}}}}, Symbol})
precompile(Tuple{typeof(Base.lock), GPUCompiler.var"#89#92"{LLVM.Context, GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#17", Tuple{CUDA.CuKernelContext, CUDA.CuDeviceArray{Float64, 1, 1}, Base.Broadcast.Broadcasted{CUDA.CuArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{CUDA.CuDeviceArray{Float64, 1, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{CUDA.CuDeviceArray{Float64, 1, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64}}}}, Base.ReentrantLock})
precompile(Tuple{typeof(Base.append!), Array{LLVM.Instruction, 1}, Array{LLVM.GetElementPtrInst, 1}})
precompile(Tuple{Type{Pair{A, B} where B where A}, GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#17", Tuple{CUDA.CuKernelContext, CUDA.CuDeviceArray{Float64, 1, 1}, Base.Broadcast.Broadcasted{CUDA.CuArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{CUDA.CuDeviceArray{Float64, 1, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{CUDA.CuDeviceArray{Float64, 1, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64}}}, String})
precompile(Tuple{Type{Base.Dict{GPUCompiler.CompilerJob{T, P, F} where F where P where T, String}}, Pair{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#17", Tuple{CUDA.CuKernelContext, CUDA.CuDeviceArray{Float64, 1, 1}, Base.Broadcast.Broadcasted{CUDA.CuArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{CUDA.CuDeviceArray{Float64, 1, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{CUDA.CuDeviceArray{Float64, 1, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64}}}, String}})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.ArrayType, LLVM.PointerType, Vararg{Any}})
precompile(Tuple{typeof(Base.copyto!), Array{LLVM.LLVMType, 1}, Tuple{LLVM.ArrayType, LLVM.PointerType, LLVM.IntegerType}})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.StructType, LLVM.StructType, Vararg{Any}})
precompile(Tuple{typeof(Base.copyto!), Array{LLVM.LLVMType, 1}, Tuple{LLVM.ArrayType, LLVM.StructType, LLVM.StructType, LLVM.IntegerType}})
precompile(Tuple{typeof(GPUCompiler.check_ir), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams, GPUCompiler.FunctionSpec{GPUArrays.var"#broadcast_kernel#17", Tuple{CUDA.CuKernelContext, CUDA.CuDeviceArray{Float64, 1, 1}, Base.Broadcast.Broadcasted{CUDA.CuArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{CUDA.CuDeviceArray{Float64, 1, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{CUDA.CuDeviceArray{Float64, 1, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64}}}, LLVM.Module})
precompile(Tuple{Type{LLVM.AndInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.SExtInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.FSubInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{CUDA.HostKernel{GPUArrays.var"#broadcast_kernel#17", Tuple{CUDA.CuKernelContext, CUDA.CuDeviceArray{Float64, 1, 1}, Base.Broadcast.Broadcasted{CUDA.CuArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{CUDA.CuDeviceArray{Float64, 1, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{CUDA.CuDeviceArray{Float64, 1, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64}}}, Function, CUDA.CuFunction, CUDA.KernelState})
precompile(Tuple{CUDA.var"##_#228", Int64, Int64, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, CUDA.HostKernel{GPUArrays.var"#broadcast_kernel#17", Tuple{CUDA.CuKernelContext, CUDA.CuDeviceArray{Float64, 1, 1}, Base.Broadcast.Broadcasted{CUDA.CuArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{CUDA.CuDeviceArray{Float64, 1, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{CUDA.CuDeviceArray{Float64, 1, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64}}, CUDA.CuKernelContext, Vararg{Any}})
precompile(Tuple{typeof(Base.map), typeof(CUDA.cudaconvert), Tuple{CUDA.CuKernelContext, CUDA.CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, Base.Broadcast.Broadcasted{CUDA.CuArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{CUDA.CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{CUDA.CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, Tuple{Bool}, Tuple{Int64}}}}, Int64}})
precompile(Tuple{CUDA.var"#call##kw", NamedTuple{(:threads, :blocks), Tuple{Int64, Int64}}, typeof(CUDA.call), CUDA.HostKernel{GPUArrays.var"#broadcast_kernel#17", Tuple{CUDA.CuKernelContext, CUDA.CuDeviceArray{Float64, 1, 1}, Base.Broadcast.Broadcasted{CUDA.CuArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{CUDA.CuDeviceArray{Float64, 1, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{CUDA.CuDeviceArray{Float64, 1, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64}}, CUDA.CuKernelContext, Vararg{Any}})
precompile(Tuple{CUDA.var"##call#207", Base.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:threads, :blocks), Tuple{Int64, Int64}}}, typeof(CUDA.call), CUDA.HostKernel{GPUArrays.var"#broadcast_kernel#17", Tuple{CUDA.CuKernelContext, CUDA.CuDeviceArray{Float64, 1, 1}, Base.Broadcast.Broadcasted{CUDA.CuArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{CUDA.CuDeviceArray{Float64, 1, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{CUDA.CuDeviceArray{Float64, 1, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64}}, CUDA.CuKernelContext, CUDA.CuDeviceArray{Float64, 1, 1}, Base.Broadcast.Broadcasted{CUDA.CuArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{CUDA.CuDeviceArray{Float64, 1, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{CUDA.CuDeviceArray{Float64, 1, 1}, Tuple{Bool}, Tuple{Int64}}}}, Int64})
precompile(Tuple{typeof(CUDA.CUBLAS.log_message), Base.Cstring})
precompile(Tuple{typeof(Base.uv_asynccb), Ptr{Nothing}})
precompile(Tuple{typeof(CUDA.CUBLAS.__runtime_init__)})
precompile(Tuple{Type{Pair{A, B} where B where A}, CUDA.CuContext, Ptr{Nothing}})
precompile(Tuple{typeof(Base.push!), Base.Set{Pair{CUDA.CuContext, Ptr{Nothing}}}, Pair{CUDA.CuContext, Ptr{Nothing}}})
precompile(Tuple{typeof(Base.:(==)), GPUArraysCore.ScalarIndexing, GPUArraysCore.ScalarIndexing})
precompile(Tuple{typeof(Base.isapprox), Float64, Float64})
precompile(Tuple{Type{Test.Returned}, Any, Any, LineNumberNode})
precompile(Tuple{typeof(Base.isempty), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Any, Any, Any, Any, Any})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.PipeEndpoint})
precompile(Tuple{Base.var"##printstyled#874", Bool, Bool, Bool, Bool, Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.write), Base.PipeEndpoint, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{String}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.PipeEndpoint}, Base.Multimedia.MIME{Symbol("text/plain")}, Float64})
precompile(Tuple{REPL.LineEdit.var"#25#26"{REPL.LineEdit.var"#116#169", String}, Any, Any})
precompile(Tuple{REPL.LineEdit.var"#116#169", REPL.LineEdit.MIState, Any, Vararg{Any}})
precompile(Tuple{REPL.LineEdit.var"##edit_abort#111", Any, typeof(REPL.LineEdit.edit_abort), REPL.LineEdit.MIState, Bool})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Int64}, Int64, Int64})
precompile(Tuple{typeof(CUDA.unsafe_finalize!), CUDA.CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}})
precompile(Tuple{CUDA.var"#context!##kw", NamedTuple{(:skip_destroyed,), Tuple{Bool}}, typeof(CUDA.context!), Function, CUDA.CuContext})
precompile(Tuple{CUDA.var"##context!#63", Bool, typeof(CUDA.context!), CUDA.var"#178#179"{CUDA.CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, CUDA.CuStream}, CUDA.CuContext})
precompile(Tuple{typeof(CUDA.unsafe_finalize!), CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}})
precompile(Tuple{CUDA.var"##context!#63", Bool, typeof(CUDA.context!), CUDA.var"#178#179"{CUDA.CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, CUDA.CuStream}, CUDA.CuContext})
precompile(Tuple{CUDA.CUBLAS.var"#1313#1320"{NamedTuple{(:device, :context, :stream, :math_mode, :math_precision), Tuple{CUDA.CuDevice, CUDA.CuContext, CUDA.CuStream, CUDA.MathMode, Symbol}}, Ptr{Nothing}}, Task})
precompile(Tuple{typeof(Base.uvfinalize), Base.AsyncCondition})
precompile(Tuple{typeof(CUDA.unsafe_unload!), CUDA.CuModule})
precompile(Tuple{CUDA.var"##context!#63", Bool, typeof(CUDA.context!), CUDA.var"#27#28"{CUDA.CuModule}, CUDA.CuContext})
precompile(Tuple{typeof(CUDA.unsafe_destroy!), CUDA.CuStream})
precompile(Tuple{CUDA.var"##context!#63", Bool, typeof(CUDA.context!), CUDA.var"#10#11"{CUDA.CuStream}, CUDA.CuContext})
precompile(Tuple{typeof(FileWatching.uvfinalize), FileWatching.FileMonitor})
